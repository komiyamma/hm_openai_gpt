/*
 * HmOpenAiGpt v 1.0.0.1
 *
 * Copyright (c) 2024 Akitsugu Komiyama
 * under the MIT License
 */


hidemaruversion "9.25.99";


jsmode @"WebView2\HmOpenAiGpt";
js {

// ------------- 会話エンジンの設定項目 -------------

let openai_key = getenv("OPENAI_API_KEY")+"2" || getenv("OPENAI_KEY");
if (!openai_key) {
    openai_key = ""; // 直接ここでAPIのKEYの文字列を指定しても良いですが、あまり推奨はしません。直書きする場合、このマクロを迂闊に配布して他者にAPIのキーが漏れないよう注意。
}
if (!openai_key) {
    message("OPENAIのキーが空です");
    throw "OPENAIのキーが空です";
}

const model = "gpt-3.5-turbo"; // "gpt-4o"などの設定可能。しかしながら値段が10倍に跳ね上がるので注意。
                               // "gpt-4-turbo" は、「値段が高いだけで低性能で利用価値なし」なので注意

const max_tokens = 4000;       // この数値は概ね 使用対象のmodelの最大トークンの半分程度を使用するのが望ましい。
                               // 「gpt-3.5-turbo なら 2000」「gpt-4o なら 4000」が目安

const renderpane_custom_param = {
    place: "rightside",        // leftside | rightside | upside | downside
    size: 400,                 // 左や右の配置の時は、横幅のこと。上や下の配置の時は縦幅のこと。
};

// --------------------------------------------------



// レンダリングペインを指定属性＆ポートでオープン
function openRenderPaneCommand(port) {
    const renderpane_json_param = {
        target: "HmOpenAiGpt",
        uri: "http://localhost:"+port+"/HmOpenAiGpt.html",
        show: 1,
        place: "rightside", 
        size: 400,
        initialize: "async",
    };

    // ユーザー指定のもので上書き。
    const renderpane_mix_param = { ...renderpane_json_param, ...renderpane_custom_param };

    renderpanecommand(renderpane_mix_param)
}


let currentmacrodir = currentmacrodirectory();
let hidemaruexedir = hidemarudir();

let currentexepath = currentmacrodir + "\\HmOpenAiGpt.exe";

// エラー用途
function outputAlert(msg) {
    let dll = loaddll(hidemaruexedir + "\\HmOutputPane.dll");
    dll.dllFuncW.Output(msg + "\r\n");
}

// ユーザーの「質問内容」が入るテキストファイル
let saveFileName = currentmacrodir + "\\HmOpenAiGpt.question.txt";

// 質問内容の1行目に「時刻」を入れることで、質問時刻がわかるようにしている。
// これはシステムが「ファイルの更新」を非常に頻繁に誤爆して多重検知するために必要。
// 多重検知した際に、「その内容はもう受付済み」という判断をするために「時刻」を質問内容に刻むようにしている。
let ticknum = tickcount() & 0x7fffffff;

// 選択テキストを質問内容としてファイルに保存し、ＡＩを指定のパラメータやモデルで起動
function doSendQuestionContent() {
    let text = hidemaru.getSelectedText();
    let commandline = `"${currentexepath}" "${openai_key}" "${model}" "${max_tokens}"`;
    runex(commandline, 0, 0, "", 0, "", 0, "", 0, "", 2, 1, 0, 0);
//      runex(commandline, 0); // デバッグ用

    let sendcmd = "HmOpenAiGpt.Message(" + ticknum + ")\n";
    hidemaru.setTimeout(
        () => { hidemaru.saveTextFile(saveFileName, sendcmd + text, "utf8"); },
        200
    );
}

// テキストを選択せずに、このマクロを実行した時は、
// 「ＡＩの応答を途中キャンセル」あるいは「ＡＩを完全にリセットしてプロセス自体を終了し、会話履歴も消去」することが出来る。
function doSendCommand() {
    let selectMenuID = menu("応答の停止 (&S)", "リセット (&R)", "回答を張り付け (&V)");
    if (selectMenuID == 1) {
        let sendcmd = "HmOpenAiGpt.Cancel(" + ticknum + ")\n";
        let text = "キャンセル";
        let commandline = `"${currentexepath}"`;
        runex(commandline, 0, 0, "", 0, "", 0, "", 0, "", 2, 1, 0, 0);
        hidemaru.saveTextFile(saveFileName, sendcmd + text, "utf8");
    }
    else if (selectMenuID == 2) {
        let sendcmd = "HmOpenAiGpt.Clear(" + ticknum + ")\n";
        let text = "リセット";
        let commandline = `"${currentexepath}" "HmOpenAiGpt.Clear()"`;
        runex(commandline, 0, 0, "", 0, "", 0, "", 0, "", 2, 1, 0, 0);
        hidemaru.saveTextFile(saveFileName, sendcmd + text, "utf8");
    }
    else if (selectMenuID == 3) {
        let loadFileName = currentmacrodir + "\\HmOpenAiGpt.txt";
        let text = hidemaru.loadTextFile(loadFileName);
        insert(text);
    }
}

// このプロセスが終わるまでは維持のシグナルとしてvar。
// C#で作成しているため、(C++とは違い)ファイルを閉じてJS空間が破棄されても、このCOMオブジェクトにぶら下がるdllは生存する。
var serverProcessCOM;

// HTML/JS用のHttpサーバーを起動。(PHPだと他の環境要らずでたった２個ほどのファイルでシンプルサーバーが動作するので一緒に内包してある)
function openHttpServer() {
    serverProcessCOM = createobject( currentmacrodir + "\\HmOpenAiGptHttpServer.dll", "HmOpenAiGptHttpServer.HmOpenAiGptHttpServer");
    let port = serverProcessCOM.Launch();
    return port;
}

// 選択範囲の最終座標に移動した方が便利だとわかっている
function gotoSelectEndPosition() {
    // 選択は自動解除した方が便利なようだ
    let cur_selendx = selendx();
    let cur_selendy = selendy();
    escapeselect();
    moveto(cur_selendx, cur_selendy);
}

// メイン処理
function doMain() {
    try {
        // HTTPサーバーを起動。起動した際に確保したポートをゲット
        let avilablePort = openHttpServer()
        if (avilablePort == 0) {
            throw "HTTPサーバーのためのポートが確保できませんでした";
        }

        // レインだリングペインをそのポートでlocalhostで開く
        openRenderPaneCommand(avilablePort);

        // 文字列を選択しているなら
        if (selecting()) {
            // それをＡＩへの質問内容として送信
            doSendQuestionContent();
            // 選択を解除し、選択の最後の座標へと移動
            gotoSelectEndPosition();
        } else {
            // それ以外なら、ＡＩにコマンドの送信
            doSendCommand();
        }
    } catch (err) {
        outputAlert(err);
    }
}

doMain();

} // js

