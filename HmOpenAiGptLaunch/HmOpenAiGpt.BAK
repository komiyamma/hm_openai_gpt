<!DOCTYPE html>
<html lang="ja">

<head>
    <title>HmOpenAiGpt</title>
    <style>
        @media (prefers-color-scheme: dark) {
            body {
                background-color: #223;
                color: #ddd;
            }
        }

        #user_question {
            width: 96%;
            white-space: pre-wrap;
        }

        #model_answer {
            width: 96%;
        }

        #btn_stop {
            margin-left: auto;
        }

        #btn_reset {
            margin-left: auto;
        }


        #model_answer {
            width: 96%;
        }

        table {
            border-collapse: collapse;
        }

        table,
        th,
        td {
            border: 1px solid #666;
        }

        /*
        body {
            background-color: #222;
            color:#eee
        }
        */
    </style>
    <script src="./HmOpenAiGpt.marked.js"></script>
</head>

<body class="markdown-body">
    <pre id="user_question"></pre>
    <hr>
    <div align="right"><button id="btn_reset">全リセット</button> <button id="btn_stop">応答を停止</button></div>
    <div id="model_answer"></div>
    <div align="right" id="model_answer_complete"></div>

    <script>
        // 現在のURLを取得
        let url = new URL(window.location.href);
        // パラメータを取得
        let params = new URLSearchParams(url.search);

        let idHtmlButtonClick = Number(params.get('idHtmlButtonClick'));

        // ボタンを取得
        const btn_stop = document.getElementById("btn_stop");
        // ボタンがクリックされた時の処理。行数をjsonテキストにして、秀丸マクロのjsmode内関数を呼び出す(引数にjson_text)を渡す
        btn_stop.addEventListener("click", function () {
            window.chrome.webview.postMessage({ funcid: idHtmlButtonClick, message: "stop" });
        });
        // ボタンを取得
        const btn_reset = document.getElementById("btn_reset");
        btn_reset.addEventListener("click", function () {
            window.chrome.webview.postMessage({ funcid: idHtmlButtonClick, message: "reset" });
        });

        // 質問番号の確保
        let lastQuestionNumber = 0;

        function getCommandNumber(firstLine) {

			let numberPattern = /\((\d+)\)/; // カッコで囲まれた数字を抽出するための正規表現パターン

			let extractedNumber = firstLine.match(numberPattern);

			if (extractedNumber) {
			    return extractedNumber[1]; // カッコ内の数字だけを取得
			} else {
			    return 0;
			}
        }

        function getFirstThreeLines(text) {

            // 改行文字でテキストを分割し、2行目以降を取得
            let lines = text.split('\n');

            // 最初の行を取得しつつ、2行目以降を確保
            let firstLine = lines.shift();

            lastQuestionNumber = getCommandNumber(firstLine);

            // 空行、または改行しかない行を削除する
            lines = lines.filter(line => line.trim() !== '');

            // 最初の3行だけを取得する
            let firstThreeLines = lines.slice(0, 3);

            // 4行目以降がある場合は、「.....」を追加する
            if (lines.length > 3) {
                firstThreeLines.push('.....');
            }

            return firstThreeLines.join('\n');
        }

        let prevQuestionText = "|- - HmOpenAiGpt - -|";
        function checkQuestionFile() {
            fetch('HmOpenAiGpt.question.txt')
                .then(response => response.text())
                .then(text => {
                    try {
                        // １行目にはコマンドが入っているのでカット。
                        // ４行以上ある場合には、「....」で代用する。
                        let newText = getFirstThreeLines(text);
                        if (prevQuestionText != newText) {
                            prevQuestionText = newText;
                            document.getElementById('user_question').textContent = newText;
                        }
                    } catch (err) { }
                })
                .catch(error => {
                    // window.alert('ファイルの読み込み中にエラーが発生しました:', error);
                });
        }

        let prevAnswerText = "|- - HmOpenAiGpt - -|";
        function checkAnswerFile() {
            fetch('HmOpenAiGpt.txt')
                .then(response => response.text())
                .then(md_text => {
                    try {
                        if (prevAnswerText != md_text) {
                            prevAnswerText = md_text
                            let htmlText = marked.parse(md_text);
                            document.getElementById('model_answer').innerHTML = htmlText;
                        }
                    } catch (err) { }
                })
                .catch(error => {
                    // window.alert('ファイルの読み込み中にエラーが発生しました:', error);
                });
        }

        let prevCompleteText = "|- - HmGoogleGemini - -|";
        function checkCompleteFile() {
            fetch('HmOpenAiGpt.complete.txt')
                .then(response => response.text())
                .then(text => {
                    try {
                       if (prevCompleteText != text) {
                           prevCompleteText = text;
                          let completeNumber = getCommandNumber(text);
                          if (lastQuestionNumber == completeNumber) {
                            if (completeNumber == lastQuestionNumber) {
                                document.getElementById('model_answer_complete').innerHTML = "<hr>完了";
                            } else {
                                document.getElementById('model_answer_complete').innerHTML = "";
                            }
                          }
                       }
                    } catch (err) { }
                })
                .catch(error => {
                    // window.alert('ファイルの読み込み中にエラーが発生しました:', error);
                });
        }

        // ページ読み込み完了に初回チェック
        document.addEventListener("DOMContentLoaded", function () {
            setTimeout(checkQuestionFile, 250); // 最初の１回だけ早めにちょっと問い合わせ
            setInterval(checkQuestionFile, 500); // 0.5秒ごとに監視
            setInterval(checkAnswerFile, 500); // 0.5秒ごとに監視
            setInterval(checkCompleteFile, 500); // 0.5秒ごとに監視
        });
    </script>
</body>

</html>